# -*- coding: utf-8 -*-
"""BSOPM with Dividends.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O-FamAiUoCKkcFwwbOqJcjk2g0A-g4_5
"""

import yfinance as yf
from scipy.stats import norm
import numpy as np

def fetch_dividend_yield(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info
    dividend_yield = info.get('dividendYield', 0)  # Get dividend yield, 0 if not found
    current_price = info.get('regularMarketPrice', None)

    # If the dividend yield is not available, try to calculate it from dividends and price
    if not dividend_yield and current_price:
        dividends = stock.dividends.last('1y').sum()  # Total dividends in the last year
        dividend_yield = dividends / current_price  # Calculate yield

    return dividend_yield, current_price

def black_scholes_dividends(S0, K, r, T, sigma, q):
    """Adjusted Black-Scholes formula for dividend-paying stocks."""
    d1 = (np.log(S0 / K) + (r - q + 0.5 * sigma**2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)
    C = S0 * np.exp(-q * T) * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    return C

# Example parameters
ticker = 'AMZN'  # Apple Inc, as an example
K = 150  # Strike price
r = 0.01  # Risk-free interest rate
T = 1  # Time to maturity (1 year)
sigma = 0.2  # Volatility (20%)

# Fetch the dividend yield and current stock price for the ticker
q, S0 = fetch_dividend_yield(ticker)

if S0 is None:
    print("Failed to fetch stock price.")
else:
    # Calculate the call option price using the adjusted Black-Scholes formula
    call_option_price = black_scholes_dividends(S0, K, r, T, sigma, q)
    print(f"The call option price for {ticker} with a strike price of {K} and maturity of {T} year(s) is: {call_option_price:.2f}")

import yfinance as yf
import numpy as np

# Fetch historical data for Reliance Industries over the last year
ticker = 'RELIANCE.NS'
stock_data = yf.download(ticker, start="2023-01-01", end="2023-12-31")

# Calculate daily returns
stock_data['Daily Return'] = stock_data['Adj Close'].pct_change()

# Calculate the standard deviation of daily returns (daily volatility)
daily_volatility = stock_data['Daily Return'].std()

# Annualize the daily volatility
annualized_volatility = daily_volatility * np.sqrt(252)

print(f"Daily Volatility: {daily_volatility * 100:.2f}%")
print(f"Annualized Volatility: {annualized_volatility * 100:.2f}%")

import numpy as np
from scipy.stats import norm

def black_scholes(S, K, T, r, q, sigma, option_type='call'):

    d1 = (np.log(S / K) + (r - q + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))
    d2 = d1 - sigma * np.sqrt(T)

    if option_type == 'call':
        price = S * np.exp(-q * T) * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)
    else:
        price = K * np.exp(-r * T) * norm.cdf(-d2) - S * np.exp(-q * T) * norm.cdf(-d1)

    return price


ticker_symbol = 'RELIANCE.NS'
stock = yf.Ticker(ticker_symbol)

# Fetch the current stock price and dividend yield
stock_info = stock.info
current_price = stock_info['regularMarketOpen']
dividend_yield = stock_info.get('dividendYield', 0) if stock_info.get('dividendYield') is not None else 0


print(f"Current Price: {current_price}")
print(f"Dividend Yield: {dividend_yield * 100:.2f}%")

S= current_price
K = float(input("Enter the strike price: "))  # Strike price
t = float(input("Enter the time to expiration in years "))  # Time to expiration
T=t/366
r = float(input("Enter the annual risk-free interest rate (as a decimal, e.g., 0.05 for 5%): "))  # Risk-free interest rate
q = dividend_yield  # Use the fetched dividend yield
sigma = annualized_volatility

# Print fetched and input values
print(f"Current Price: {current_price}")
print(f"Dividend Yield: {dividend_yield * 100:.2f}%")
print(f"Strike Price (K): {K}")
print(f"Time to Expiration (T): {T}")
print(f"Risk-Free Interest Rate (r): {r}")

call_price = black_scholes(S, K,T, r, q, sigma, option_type='call')
print(f"Call Option Price: {call_price:.2f}")

ticker_symbol = 'RELIANCE.NS'
stock = yf.Ticker(ticker_symbol)

# Fetch the current stock price and dividend yield
stock_info = stock.info
print(stock_info)

pip install requests
pip install quandl